//http://www.mathcs.emory.edu/~cheung/Courses/171/Syllabus/7-Sort/merge-sort5.html
//http://www.mathcs.emory.edu/~cheung/Courses/171/Syllabus/7-Sort/merge-sort3.html
//https://www.geeksforgeeks.org/heap-sort/
  //merge sort top->down
   public static void sort(double[] a)
   {
      double[] left, right;

      if ( a.length == 1 )
      {
         // No need to sort !
         return;
      }

      /* =================================================================
         Split        a[0 ..... middle-1  middle .... a.length-1]
                              /                  \
                 left[0 .. middle-1]       right[0 ... a.length-1-middle]
         ================================================================= */
      int middle = a.length/2;

      left  = new double[middle];           // Create array to hold left half

      for ( int i = 0; i < middle; i++ )
         left[i] = a[i];

      right = new double[a.length-middle];  // Create array to hold right half 

      for ( int i = 0; i < a.length-middle; i++ )
         right[i] = a[i+middle];

      /* ======================================
         Sort both halves of the arrays
         Let's use MergeSort !!!
         ====================================== */
      sort( left );       // Recursion    
      sort( right );      // Recursion    

      /* ======================================
         Merge both sorted arrays back
         ====================================== */
      merge( a, left, right );   // We have discussed the Merge alg. already...   
   }
   
   //this is bottom - up merge sort
   public static void sort(double[] a, double[] tmp )
   {
      int width;

      for ( width = 1; width < a.length; width = 2*width )      
      {
         // Combine pairs of array a of width "width"
         int i;

         for ( i = 0; i < a.length; i = i + 2*width )
         {
            int left, middle, right;

            left = i;
            middle = i + width;
            right  = i + 2*width;

            merge( a, left, middle, right, tmp );

         }
      }
   }
